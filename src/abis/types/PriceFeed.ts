/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace UniswapConfig {
  export type TokenConfigStruct = {
    cToken: string;
    underlying: string;
    symbolHash: BytesLike;
    baseUnit: BigNumberish;
    priceSource: BigNumberish;
    fixedPrice: BigNumberish;
    uniswapMarket: string;
    isUniswapReversed: boolean;
  };

  export type TokenConfigStructOutput = [
    string,
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    string,
    boolean
  ] & {
    cToken: string;
    underlying: string;
    symbolHash: string;
    baseUnit: BigNumber;
    priceSource: number;
    fixedPrice: BigNumber;
    uniswapMarket: string;
    isUniswapReversed: boolean;
  };
}

export interface PriceFeedInterface extends utils.Interface {
  contractName: "PriceFeed";
  functions: {
    "anchorPeriod()": FunctionFragment;
    "ethBaseUnit()": FunctionFragment;
    "expScale()": FunctionFragment;
    "getTokenConfig(uint256)": FunctionFragment;
    "getTokenConfigByCToken(address)": FunctionFragment;
    "getTokenConfigBySymbol(string)": FunctionFragment;
    "getTokenConfigBySymbolHash(bytes32)": FunctionFragment;
    "getTokenConfigByUnderlying(address)": FunctionFragment;
    "getUnderlyingPrice(address)": FunctionFragment;
    "invalidateReporter(bytes,bytes)": FunctionFragment;
    "lowerBoundAnchorRatio()": FunctionFragment;
    "maxTokens()": FunctionFragment;
    "newObservations(bytes32)": FunctionFragment;
    "numTokens()": FunctionFragment;
    "oldObservations(bytes32)": FunctionFragment;
    "postPrices(bytes[],bytes[],string[])": FunctionFragment;
    "price(string)": FunctionFragment;
    "priceData()": FunctionFragment;
    "prices(bytes32)": FunctionFragment;
    "reporter()": FunctionFragment;
    "reporterInvalidated()": FunctionFragment;
    "source(bytes,bytes)": FunctionFragment;
    "upperBoundAnchorRatio()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "anchorPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethBaseUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByCToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigBySymbolHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenConfigByUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateReporter",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lowerBoundAnchorRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newObservations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "numTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oldObservations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postPrices",
    values: [BytesLike[], BytesLike[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "price", values: [string]): string;
  encodeFunctionData(functionFragment: "priceData", values?: undefined): string;
  encodeFunctionData(functionFragment: "prices", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "reporter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reporterInvalidated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "source",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upperBoundAnchorRatio",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "anchorPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethBaseUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigBySymbolHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenConfigByUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invalidateReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerBoundAnchorRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oldObservations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reporter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reporterInvalidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "source", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upperBoundAnchorRatio",
    data: BytesLike
  ): Result;

  events: {
    "AnchorPriceUpdated(string,uint256,uint256,uint256)": EventFragment;
    "PriceGuarded(string,uint256,uint256)": EventFragment;
    "PriceUpdated(string,uint256)": EventFragment;
    "ReporterInvalidated(address)": EventFragment;
    "UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnchorPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceGuarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReporterInvalidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UniswapWindowUpdated"): EventFragment;
}

export type AnchorPriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    symbol: string;
    anchorPrice: BigNumber;
    oldTimestamp: BigNumber;
    newTimestamp: BigNumber;
  }
>;

export type AnchorPriceUpdatedEventFilter =
  TypedEventFilter<AnchorPriceUpdatedEvent>;

export type PriceGuardedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { symbol: string; reporter: BigNumber; anchor: BigNumber }
>;

export type PriceGuardedEventFilter = TypedEventFilter<PriceGuardedEvent>;

export type PriceUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { symbol: string; price: BigNumber }
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export type ReporterInvalidatedEvent = TypedEvent<
  [string],
  { reporter: string }
>;

export type ReporterInvalidatedEventFilter =
  TypedEventFilter<ReporterInvalidatedEvent>;

export type UniswapWindowUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    symbolHash: string;
    oldTimestamp: BigNumber;
    newTimestamp: BigNumber;
    oldPrice: BigNumber;
    newPrice: BigNumber;
  }
>;

export type UniswapWindowUpdatedEventFilter =
  TypedEventFilter<UniswapWindowUpdatedEvent>;

export interface PriceFeed extends BaseContract {
  contractName: "PriceFeed";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    anchorPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethBaseUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    expScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenConfig(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigByCToken(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigBySymbol(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigBySymbolHash(
      symbolHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getTokenConfigByUnderlying(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<[UniswapConfig.TokenConfigStructOutput]>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invalidateReporter(
      message: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    newObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }
    >;

    numTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    oldObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }
    >;

    postPrices(
      messages: BytesLike[],
      signatures: BytesLike[],
      symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    price(symbol: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    priceData(overrides?: CallOverrides): Promise<[string]>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    reporter(overrides?: CallOverrides): Promise<[string]>;

    reporterInvalidated(overrides?: CallOverrides): Promise<[boolean]>;

    source(
      message: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  anchorPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  ethBaseUnit(overrides?: CallOverrides): Promise<BigNumber>;

  expScale(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenConfig(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigByCToken(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigBySymbol(
    symbol: string,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigBySymbolHash(
    symbolHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getTokenConfigByUnderlying(
    underlying: string,
    overrides?: CallOverrides
  ): Promise<UniswapConfig.TokenConfigStructOutput>;

  getUnderlyingPrice(
    cToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invalidateReporter(
    message: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

  newObservations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }>;

  numTokens(overrides?: CallOverrides): Promise<BigNumber>;

  oldObservations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }>;

  postPrices(
    messages: BytesLike[],
    signatures: BytesLike[],
    symbols: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  price(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

  priceData(overrides?: CallOverrides): Promise<string>;

  prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  reporter(overrides?: CallOverrides): Promise<string>;

  reporterInvalidated(overrides?: CallOverrides): Promise<boolean>;

  source(
    message: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    anchorPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ethBaseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    expScale(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenConfig(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigByCToken(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigBySymbol(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigBySymbolHash(
      symbolHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getTokenConfigByUnderlying(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<UniswapConfig.TokenConfigStructOutput>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateReporter(
      message: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

    newObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }
    >;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    oldObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { timestamp: BigNumber; acc: BigNumber }
    >;

    postPrices(
      messages: BytesLike[],
      signatures: BytesLike[],
      symbols: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    price(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceData(overrides?: CallOverrides): Promise<string>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    reporter(overrides?: CallOverrides): Promise<string>;

    reporterInvalidated(overrides?: CallOverrides): Promise<boolean>;

    source(
      message: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AnchorPriceUpdated(string,uint256,uint256,uint256)"(
      symbol?: null,
      anchorPrice?: null,
      oldTimestamp?: null,
      newTimestamp?: null
    ): AnchorPriceUpdatedEventFilter;
    AnchorPriceUpdated(
      symbol?: null,
      anchorPrice?: null,
      oldTimestamp?: null,
      newTimestamp?: null
    ): AnchorPriceUpdatedEventFilter;

    "PriceGuarded(string,uint256,uint256)"(
      symbol?: null,
      reporter?: null,
      anchor?: null
    ): PriceGuardedEventFilter;
    PriceGuarded(
      symbol?: null,
      reporter?: null,
      anchor?: null
    ): PriceGuardedEventFilter;

    "PriceUpdated(string,uint256)"(
      symbol?: null,
      price?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(symbol?: null, price?: null): PriceUpdatedEventFilter;

    "ReporterInvalidated(address)"(
      reporter?: null
    ): ReporterInvalidatedEventFilter;
    ReporterInvalidated(reporter?: null): ReporterInvalidatedEventFilter;

    "UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)"(
      symbolHash?: BytesLike | null,
      oldTimestamp?: null,
      newTimestamp?: null,
      oldPrice?: null,
      newPrice?: null
    ): UniswapWindowUpdatedEventFilter;
    UniswapWindowUpdated(
      symbolHash?: BytesLike | null,
      oldTimestamp?: null,
      newTimestamp?: null,
      oldPrice?: null,
      newPrice?: null
    ): UniswapWindowUpdatedEventFilter;
  };

  estimateGas: {
    anchorPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ethBaseUnit(overrides?: CallOverrides): Promise<BigNumber>;

    expScale(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenConfig(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigByCToken(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigBySymbol(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigBySymbolHash(
      symbolHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenConfigByUnderlying(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invalidateReporter(
      message: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lowerBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;

    maxTokens(overrides?: CallOverrides): Promise<BigNumber>;

    newObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    oldObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postPrices(
      messages: BytesLike[],
      signatures: BytesLike[],
      symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    price(symbol: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceData(overrides?: CallOverrides): Promise<BigNumber>;

    prices(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    reporter(overrides?: CallOverrides): Promise<BigNumber>;

    reporterInvalidated(overrides?: CallOverrides): Promise<BigNumber>;

    source(
      message: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upperBoundAnchorRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    anchorPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethBaseUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenConfig(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigByCToken(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigBySymbol(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigBySymbolHash(
      symbolHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenConfigByUnderlying(
      underlying: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      cToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invalidateReporter(
      message: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lowerBoundAnchorRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oldObservations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postPrices(
      messages: BytesLike[],
      signatures: BytesLike[],
      symbols: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    price(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reporter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reporterInvalidated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    source(
      message: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upperBoundAnchorRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
