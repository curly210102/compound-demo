/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BfComptrollerInterface extends utils.Interface {
  contractName: "BfComptroller";
  functions: {
    "_become(address)": FunctionFragment;
    "_borrowGuardianPaused()": FunctionFragment;
    "_grantBf(address,uint256)": FunctionFragment;
    "_mintGuardianPaused()": FunctionFragment;
    "_setBorrowCapGuardian(address)": FunctionFragment;
    "_setBorrowPaused(address,bool)": FunctionFragment;
    "_setCloseFactor(uint256)": FunctionFragment;
    "_setCollateralFactor(address,uint256)": FunctionFragment;
    "_setLiquidationIncentive(uint256)": FunctionFragment;
    "_setMarketBorrowCaps(address[],uint256[])": FunctionFragment;
    "_setMintPaused(address,bool)": FunctionFragment;
    "_setPauseGuardian(address)": FunctionFragment;
    "_setPriceOracle(address)": FunctionFragment;
    "_setRewardSpeed(uint8,address,uint256)": FunctionFragment;
    "_setSeizePaused(bool)": FunctionFragment;
    "_setTransferPaused(bool)": FunctionFragment;
    "_supportMarket(address)": FunctionFragment;
    "accountAssets(address,uint256)": FunctionFragment;
    "admin()": FunctionFragment;
    "allMarkets(uint256)": FunctionFragment;
    "bfAddress()": FunctionFragment;
    "borrowAllowed(address,address,uint256)": FunctionFragment;
    "borrowCapGuardian()": FunctionFragment;
    "borrowCaps(address)": FunctionFragment;
    "borrowGuardianPaused(address)": FunctionFragment;
    "borrowVerify(address,address,uint256)": FunctionFragment;
    "checkMembership(address,address)": FunctionFragment;
    "claimReward(uint8,address)": FunctionFragment;
    "closeFactorMantissa()": FunctionFragment;
    "comptrollerImplementation()": FunctionFragment;
    "enterMarkets(address[])": FunctionFragment;
    "exitMarket(address)": FunctionFragment;
    "getAccountLiquidity(address)": FunctionFragment;
    "getAllMarkets()": FunctionFragment;
    "getAssetsIn(address)": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": FunctionFragment;
    "initialIndexConstant()": FunctionFragment;
    "isComptroller()": FunctionFragment;
    "liquidateBorrowAllowed(address,address,address,address,uint256)": FunctionFragment;
    "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": FunctionFragment;
    "liquidateCalculateSeizeTokens(address,address,uint256)": FunctionFragment;
    "liquidationIncentiveMantissa()": FunctionFragment;
    "markets(address)": FunctionFragment;
    "maxAssets()": FunctionFragment;
    "mintAllowed(address,address,uint256)": FunctionFragment;
    "mintGuardianPaused(address)": FunctionFragment;
    "mintVerify(address,address,uint256,uint256)": FunctionFragment;
    "oracle()": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pendingAdmin()": FunctionFragment;
    "pendingComptrollerImplementation()": FunctionFragment;
    "redeemAllowed(address,address,uint256)": FunctionFragment;
    "redeemVerify(address,address,uint256,uint256)": FunctionFragment;
    "repayBorrowAllowed(address,address,address,uint256)": FunctionFragment;
    "repayBorrowVerify(address,address,address,uint256,uint256)": FunctionFragment;
    "rewardAccrued(uint8,address)": FunctionFragment;
    "rewardBf()": FunctionFragment;
    "rewardBorrowState(uint8,address)": FunctionFragment;
    "rewardBorrowerIndex(uint8,address,address)": FunctionFragment;
    "rewardEther()": FunctionFragment;
    "rewardSpeeds(uint8,address)": FunctionFragment;
    "rewardSupplierIndex(uint8,address,address)": FunctionFragment;
    "rewardSupplyState(uint8,address)": FunctionFragment;
    "seizeAllowed(address,address,address,address,uint256)": FunctionFragment;
    "seizeGuardianPaused()": FunctionFragment;
    "seizeVerify(address,address,address,address,uint256)": FunctionFragment;
    "setBfAddress(address)": FunctionFragment;
    "transferAllowed(address,address,address,uint256)": FunctionFragment;
    "transferGuardianPaused()": FunctionFragment;
    "transferVerify(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_become", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_borrowGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_grantBf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_mintGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_setBorrowCapGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setBorrowPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCloseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCollateralFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMarketBorrowCaps",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMintPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPauseGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setRewardSpeed",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setSeizePaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTransferPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_supportMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bfAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCapGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrowCaps", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowVerify",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "exitMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAssetsIn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialIndexConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowAllowed",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowVerify",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "markets", values: [string]): string;
  encodeFunctionData(functionFragment: "maxAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGuardianPaused",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVerify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingComptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVerify",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowVerify",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAccrued",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "rewardBf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardBorrowState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBorrowerIndex",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSpeeds",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSupplierIndex",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSupplyState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAllowed",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeVerify",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBfAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferVerify",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_borrowGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_grantBf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_mintGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBorrowCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCloseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMarketBorrowCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setRewardSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setSeizePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_supportMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bfAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialIndexConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingComptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardBf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardBorrowState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBorrowerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSupplierIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSupplyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBfAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVerify",
    data: BytesLike
  ): Result;

  events: {
    "ActionPaused(string,bool)": EventFragment;
    "BfGranted(address,uint256)": EventFragment;
    "ContributorBfSpeedUpdated(address,uint256)": EventFragment;
    "DistributedBorrowerReward(uint8,address,address,uint256,uint256)": EventFragment;
    "DistributedSupplierReward(uint8,address,address,uint256,uint256)": EventFragment;
    "Failure(uint256,uint256,uint256)": EventFragment;
    "MarketEntered(address,address)": EventFragment;
    "MarketExited(address,address)": EventFragment;
    "MarketListed(address)": EventFragment;
    "NewBorrowCap(address,uint256)": EventFragment;
    "NewBorrowCapGuardian(address,address)": EventFragment;
    "NewCloseFactor(uint256,uint256)": EventFragment;
    "NewCollateralFactor(address,uint256,uint256)": EventFragment;
    "NewLiquidationIncentive(uint256,uint256)": EventFragment;
    "NewPauseGuardian(address,address)": EventFragment;
    "NewPriceOracle(address,address)": EventFragment;
    "SpeedUpdated(uint8,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BfGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContributorBfSpeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedBorrowerReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributedSupplierReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Failure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBorrowCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBorrowCapGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCloseFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCollateralFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLiquidationIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPauseGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeedUpdated"): EventFragment;
}

export type ActionPaused_string_bool_Event = TypedEvent<
  [string, boolean],
  { action: string; pauseState: boolean }
>;

export type ActionPaused_string_bool_EventFilter =
  TypedEventFilter<ActionPaused_string_bool_Event>;

export type ActionPaused_address_string_bool_Event = TypedEvent<
  [string, string, boolean],
  { bfToken: string; action: string; pauseState: boolean }
>;

export type ActionPaused_address_string_bool_EventFilter =
  TypedEventFilter<ActionPaused_address_string_bool_Event>;

export type BfGrantedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type BfGrantedEventFilter = TypedEventFilter<BfGrantedEvent>;

export type ContributorBfSpeedUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { contributor: string; newSpeed: BigNumber }
>;

export type ContributorBfSpeedUpdatedEventFilter =
  TypedEventFilter<ContributorBfSpeedUpdatedEvent>;

export type DistributedBorrowerRewardEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber],
  {
    tokenType: number;
    bfToken: string;
    borrower: string;
    bfDelta: BigNumber;
    bfBorrowIndex: BigNumber;
  }
>;

export type DistributedBorrowerRewardEventFilter =
  TypedEventFilter<DistributedBorrowerRewardEvent>;

export type DistributedSupplierRewardEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber],
  {
    tokenType: number;
    bfToken: string;
    borrower: string;
    bfDelta: BigNumber;
    bfBorrowIndex: BigNumber;
  }
>;

export type DistributedSupplierRewardEventFilter =
  TypedEventFilter<DistributedSupplierRewardEvent>;

export type FailureEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { error: BigNumber; info: BigNumber; detail: BigNumber }
>;

export type FailureEventFilter = TypedEventFilter<FailureEvent>;

export type MarketEnteredEvent = TypedEvent<
  [string, string],
  { bfToken: string; account: string }
>;

export type MarketEnteredEventFilter = TypedEventFilter<MarketEnteredEvent>;

export type MarketExitedEvent = TypedEvent<
  [string, string],
  { bfToken: string; account: string }
>;

export type MarketExitedEventFilter = TypedEventFilter<MarketExitedEvent>;

export type MarketListedEvent = TypedEvent<[string], { bfToken: string }>;

export type MarketListedEventFilter = TypedEventFilter<MarketListedEvent>;

export type NewBorrowCapEvent = TypedEvent<
  [string, BigNumber],
  { bfToken: string; newBorrowCap: BigNumber }
>;

export type NewBorrowCapEventFilter = TypedEventFilter<NewBorrowCapEvent>;

export type NewBorrowCapGuardianEvent = TypedEvent<
  [string, string],
  { oldBorrowCapGuardian: string; newBorrowCapGuardian: string }
>;

export type NewBorrowCapGuardianEventFilter =
  TypedEventFilter<NewBorrowCapGuardianEvent>;

export type NewCloseFactorEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldCloseFactorMantissa: BigNumber; newCloseFactorMantissa: BigNumber }
>;

export type NewCloseFactorEventFilter = TypedEventFilter<NewCloseFactorEvent>;

export type NewCollateralFactorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    bfToken: string;
    oldCollateralFactorMantissa: BigNumber;
    newCollateralFactorMantissa: BigNumber;
  }
>;

export type NewCollateralFactorEventFilter =
  TypedEventFilter<NewCollateralFactorEvent>;

export type NewLiquidationIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber],
  {
    oldLiquidationIncentiveMantissa: BigNumber;
    newLiquidationIncentiveMantissa: BigNumber;
  }
>;

export type NewLiquidationIncentiveEventFilter =
  TypedEventFilter<NewLiquidationIncentiveEvent>;

export type NewPauseGuardianEvent = TypedEvent<
  [string, string],
  { oldPauseGuardian: string; newPauseGuardian: string }
>;

export type NewPauseGuardianEventFilter =
  TypedEventFilter<NewPauseGuardianEvent>;

export type NewPriceOracleEvent = TypedEvent<
  [string, string],
  { oldPriceOracle: string; newPriceOracle: string }
>;

export type NewPriceOracleEventFilter = TypedEventFilter<NewPriceOracleEvent>;

export type SpeedUpdatedEvent = TypedEvent<
  [number, string, BigNumber],
  { tokenType: number; bfToken: string; newSpeed: BigNumber }
>;

export type SpeedUpdatedEventFilter = TypedEventFilter<SpeedUpdatedEvent>;

export interface BfComptroller extends BaseContract {
  contractName: "BfComptroller";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BfComptrollerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _grantBf(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setBorrowPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setCollateralFactor(
      bfToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setMarketBorrowCaps(
      bfTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setMintPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setRewardSpeed(
      rewardType: BigNumberish,
      bfToken: string,
      rewardSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setSeizePaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _setTransferPaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _supportMarket(
      bfToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    bfAddress(overrides?: CallOverrides): Promise<[string]>;

    borrowAllowed(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<[string]>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    borrowVerify(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkMembership(
      account: string,
      bfToken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimReward(uint8,address)"(
      rewardType: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint8,address,address[])"(
      rewardType: BigNumberish,
      holder: string,
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint8,address[],address[],bool,bool)"(
      rewardType: BigNumberish,
      holders: string[],
      bfTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<[BigNumber]>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<[string]>;

    enterMarkets(
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitMarket(
      bfTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getAssetsIn(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHypotheticalAccountLiquidity(
      account: string,
      bfTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialIndexConstant(overrides?: CallOverrides): Promise<[BigNumber]>;

    isComptroller(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateBorrowAllowed(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateBorrowVerify(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidateCalculateSeizeTokens(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isBfed: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAllowed(
      bfToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintVerify(
      bfToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pendingAdmin(overrides?: CallOverrides): Promise<[string]>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    redeemAllowed(
      bfToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemVerify(
      bfToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowAllowed(
      bfToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayBorrowVerify(
      bfToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardAccrued(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardBf(overrides?: CallOverrides): Promise<[number]>;

    rewardBorrowState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    rewardBorrowerIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardEther(overrides?: CallOverrides): Promise<[number]>;

    rewardSpeeds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardSupplierIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardSupplyState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    seizeAllowed(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    seizeVerify(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBfAddress(
      newBfAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAllowed(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<[boolean]>;

    transferVerify(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _become(
    unitroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _grantBf(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  _setBorrowCapGuardian(
    newBorrowCapGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setBorrowPaused(
    bfToken: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setCloseFactor(
    newCloseFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setCollateralFactor(
    bfToken: string,
    newCollateralFactorMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setMarketBorrowCaps(
    bfTokens: string[],
    newBorrowCaps: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setMintPaused(
    bfToken: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setPauseGuardian(
    newPauseGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setPriceOracle(
    newOracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setRewardSpeed(
    rewardType: BigNumberish,
    bfToken: string,
    rewardSpeed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setSeizePaused(
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _setTransferPaused(
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _supportMarket(
    bfToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accountAssets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  bfAddress(overrides?: CallOverrides): Promise<string>;

  borrowAllowed(
    bfToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

  borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowGuardianPaused(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  borrowVerify(
    bfToken: string,
    borrower: string,
    borrowAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkMembership(
    account: string,
    bfToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimReward(uint8,address)"(
    rewardType: BigNumberish,
    holder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint8,address,address[])"(
    rewardType: BigNumberish,
    holder: string,
    bfTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint8,address[],address[],bool,bool)"(
    rewardType: BigNumberish,
    holders: string[],
    bfTokens: string[],
    borrowers: boolean,
    suppliers: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  enterMarkets(
    bfTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitMarket(
    bfTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

  getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getHypotheticalAccountLiquidity(
    account: string,
    bfTokenModify: string,
    redeemTokens: BigNumberish,
    borrowAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  initialIndexConstant(overrides?: CallOverrides): Promise<BigNumber>;

  isComptroller(overrides?: CallOverrides): Promise<boolean>;

  liquidateBorrowAllowed(
    bfTokenBorrowed: string,
    bfTokenCollateral: string,
    liquidator: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateBorrowVerify(
    bfTokenBorrowed: string,
    bfTokenCollateral: string,
    liquidator: string,
    borrower: string,
    actualRepayAmount: BigNumberish,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidateCalculateSeizeTokens(
    bfTokenBorrowed: string,
    bfTokenCollateral: string,
    actualRepayAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

  markets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isListed: boolean;
      collateralFactorMantissa: BigNumber;
      isBfed: boolean;
    }
  >;

  maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

  mintAllowed(
    bfToken: string,
    minter: string,
    mintAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintGuardianPaused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  mintVerify(
    bfToken: string,
    minter: string,
    actualMintAmount: BigNumberish,
    mintTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pendingAdmin(overrides?: CallOverrides): Promise<string>;

  pendingComptrollerImplementation(overrides?: CallOverrides): Promise<string>;

  redeemAllowed(
    bfToken: string,
    redeemer: string,
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemVerify(
    bfToken: string,
    redeemer: string,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowAllowed(
    bfToken: string,
    payer: string,
    borrower: string,
    repayAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayBorrowVerify(
    bfToken: string,
    payer: string,
    borrower: string,
    actualRepayAmount: BigNumberish,
    borrowerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardAccrued(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardBf(overrides?: CallOverrides): Promise<number>;

  rewardBorrowState(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

  rewardBorrowerIndex(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardEther(overrides?: CallOverrides): Promise<number>;

  rewardSpeeds(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardSupplierIndex(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardSupplyState(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

  seizeAllowed(
    bfTokenCollateral: string,
    bfTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  seizeVerify(
    bfTokenCollateral: string,
    bfTokenBorrowed: string,
    liquidator: string,
    borrower: string,
    seizeTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBfAddress(
    newBfAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAllowed(
    bfToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

  transferVerify(
    bfToken: string,
    src: string,
    dst: string,
    transferTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _become(unitroller: string, overrides?: CallOverrides): Promise<void>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _grantBf(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _setBorrowPaused(
      bfToken: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setCollateralFactor(
      bfToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      bfTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    _setMintPaused(
      bfToken: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _setRewardSpeed(
      rewardType: BigNumberish,
      bfToken: string,
      rewardSpeed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setSeizePaused(
      state: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _setTransferPaused(
      state: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _supportMarket(
      bfToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    allMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    bfAddress(overrides?: CallOverrides): Promise<string>;

    borrowAllowed(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<string>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    borrowVerify(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkMembership(
      account: string,
      bfToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimReward(uint8,address)"(
      rewardType: BigNumberish,
      holder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint8,address,address[])"(
      rewardType: BigNumberish,
      holder: string,
      bfTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint8,address[],address[],bool,bool)"(
      rewardType: BigNumberish,
      holders: string[],
      bfTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<string>;

    enterMarkets(
      bfTokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitMarket(
      bfTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getAllMarkets(overrides?: CallOverrides): Promise<string[]>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<string[]>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      bfTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    initialIndexConstant(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<boolean>;

    liquidateBorrowAllowed(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateCalculateSeizeTokens(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: BigNumber;
        isBfed: boolean;
      }
    >;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      bfToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintVerify(
      bfToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pendingAdmin(overrides?: CallOverrides): Promise<string>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    redeemAllowed(
      bfToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemVerify(
      bfToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBorrowAllowed(
      bfToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayBorrowVerify(
      bfToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardAccrued(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBf(overrides?: CallOverrides): Promise<number>;

    rewardBorrowState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    rewardBorrowerIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEther(overrides?: CallOverrides): Promise<number>;

    rewardSpeeds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplierIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplyState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number] & { index: BigNumber; timestamp: number }>;

    seizeAllowed(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    seizeVerify(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBfAddress(
      newBfAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAllowed(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<boolean>;

    transferVerify(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActionPaused(string,bool)"(
      action?: null,
      pauseState?: null
    ): ActionPaused_string_bool_EventFilter;
    "ActionPaused(address,string,bool)"(
      bfToken?: null,
      action?: null,
      pauseState?: null
    ): ActionPaused_address_string_bool_EventFilter;

    "BfGranted(address,uint256)"(
      recipient?: null,
      amount?: null
    ): BfGrantedEventFilter;
    BfGranted(recipient?: null, amount?: null): BfGrantedEventFilter;

    "ContributorBfSpeedUpdated(address,uint256)"(
      contributor?: string | null,
      newSpeed?: null
    ): ContributorBfSpeedUpdatedEventFilter;
    ContributorBfSpeedUpdated(
      contributor?: string | null,
      newSpeed?: null
    ): ContributorBfSpeedUpdatedEventFilter;

    "DistributedBorrowerReward(uint8,address,address,uint256,uint256)"(
      tokenType?: BigNumberish | null,
      bfToken?: string | null,
      borrower?: string | null,
      bfDelta?: null,
      bfBorrowIndex?: null
    ): DistributedBorrowerRewardEventFilter;
    DistributedBorrowerReward(
      tokenType?: BigNumberish | null,
      bfToken?: string | null,
      borrower?: string | null,
      bfDelta?: null,
      bfBorrowIndex?: null
    ): DistributedBorrowerRewardEventFilter;

    "DistributedSupplierReward(uint8,address,address,uint256,uint256)"(
      tokenType?: BigNumberish | null,
      bfToken?: string | null,
      borrower?: string | null,
      bfDelta?: null,
      bfBorrowIndex?: null
    ): DistributedSupplierRewardEventFilter;
    DistributedSupplierReward(
      tokenType?: BigNumberish | null,
      bfToken?: string | null,
      borrower?: string | null,
      bfDelta?: null,
      bfBorrowIndex?: null
    ): DistributedSupplierRewardEventFilter;

    "Failure(uint256,uint256,uint256)"(
      error?: null,
      info?: null,
      detail?: null
    ): FailureEventFilter;
    Failure(error?: null, info?: null, detail?: null): FailureEventFilter;

    "MarketEntered(address,address)"(
      bfToken?: null,
      account?: null
    ): MarketEnteredEventFilter;
    MarketEntered(bfToken?: null, account?: null): MarketEnteredEventFilter;

    "MarketExited(address,address)"(
      bfToken?: null,
      account?: null
    ): MarketExitedEventFilter;
    MarketExited(bfToken?: null, account?: null): MarketExitedEventFilter;

    "MarketListed(address)"(bfToken?: null): MarketListedEventFilter;
    MarketListed(bfToken?: null): MarketListedEventFilter;

    "NewBorrowCap(address,uint256)"(
      bfToken?: string | null,
      newBorrowCap?: null
    ): NewBorrowCapEventFilter;
    NewBorrowCap(
      bfToken?: string | null,
      newBorrowCap?: null
    ): NewBorrowCapEventFilter;

    "NewBorrowCapGuardian(address,address)"(
      oldBorrowCapGuardian?: null,
      newBorrowCapGuardian?: null
    ): NewBorrowCapGuardianEventFilter;
    NewBorrowCapGuardian(
      oldBorrowCapGuardian?: null,
      newBorrowCapGuardian?: null
    ): NewBorrowCapGuardianEventFilter;

    "NewCloseFactor(uint256,uint256)"(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): NewCloseFactorEventFilter;
    NewCloseFactor(
      oldCloseFactorMantissa?: null,
      newCloseFactorMantissa?: null
    ): NewCloseFactorEventFilter;

    "NewCollateralFactor(address,uint256,uint256)"(
      bfToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null
    ): NewCollateralFactorEventFilter;
    NewCollateralFactor(
      bfToken?: null,
      oldCollateralFactorMantissa?: null,
      newCollateralFactorMantissa?: null
    ): NewCollateralFactorEventFilter;

    "NewLiquidationIncentive(uint256,uint256)"(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): NewLiquidationIncentiveEventFilter;
    NewLiquidationIncentive(
      oldLiquidationIncentiveMantissa?: null,
      newLiquidationIncentiveMantissa?: null
    ): NewLiquidationIncentiveEventFilter;

    "NewPauseGuardian(address,address)"(
      oldPauseGuardian?: null,
      newPauseGuardian?: null
    ): NewPauseGuardianEventFilter;
    NewPauseGuardian(
      oldPauseGuardian?: null,
      newPauseGuardian?: null
    ): NewPauseGuardianEventFilter;

    "NewPriceOracle(address,address)"(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): NewPriceOracleEventFilter;
    NewPriceOracle(
      oldPriceOracle?: null,
      newPriceOracle?: null
    ): NewPriceOracleEventFilter;

    "SpeedUpdated(uint8,address,uint256)"(
      tokenType?: null,
      bfToken?: string | null,
      newSpeed?: null
    ): SpeedUpdatedEventFilter;
    SpeedUpdated(
      tokenType?: null,
      bfToken?: string | null,
      newSpeed?: null
    ): SpeedUpdatedEventFilter;
  };

  estimateGas: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _borrowGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _grantBf(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _mintGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setBorrowPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setCollateralFactor(
      bfToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setMarketBorrowCaps(
      bfTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setMintPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setRewardSpeed(
      rewardType: BigNumberish,
      bfToken: string,
      rewardSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setSeizePaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _setTransferPaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _supportMarket(
      bfToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bfAddress(overrides?: CallOverrides): Promise<BigNumber>;

    borrowAllowed(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    borrowCaps(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowVerify(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkMembership(
      account: string,
      bfToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimReward(uint8,address)"(
      rewardType: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(uint8,address,address[])"(
      rewardType: BigNumberish,
      holder: string,
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(uint8,address[],address[],bool,bool)"(
      rewardType: BigNumberish,
      holders: string[],
      bfTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeFactorMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    comptrollerImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    enterMarkets(
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitMarket(
      bfTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetsIn(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getHypotheticalAccountLiquidity(
      account: string,
      bfTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialIndexConstant(overrides?: CallOverrides): Promise<BigNumber>;

    isComptroller(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBorrowAllowed(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateBorrowVerify(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidateCalculateSeizeTokens(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationIncentiveMantissa(overrides?: CallOverrides): Promise<BigNumber>;

    markets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxAssets(overrides?: CallOverrides): Promise<BigNumber>;

    mintAllowed(
      bfToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintVerify(
      bfToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemAllowed(
      bfToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemVerify(
      bfToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowAllowed(
      bfToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayBorrowVerify(
      bfToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardAccrued(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBf(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBorrowState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardBorrowerIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEther(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSpeeds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplierIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSupplyState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seizeAllowed(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seizeGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    seizeVerify(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBfAddress(
      newBfAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAllowed(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGuardianPaused(overrides?: CallOverrides): Promise<BigNumber>;

    transferVerify(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _become(
      unitroller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _borrowGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _grantBf(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _mintGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _setBorrowCapGuardian(
      newBorrowCapGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setBorrowPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setCloseFactor(
      newCloseFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setCollateralFactor(
      bfToken: string,
      newCollateralFactorMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setLiquidationIncentive(
      newLiquidationIncentiveMantissa: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setMarketBorrowCaps(
      bfTokens: string[],
      newBorrowCaps: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setMintPaused(
      bfToken: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setPauseGuardian(
      newPauseGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setPriceOracle(
      newOracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setRewardSpeed(
      rewardType: BigNumberish,
      bfToken: string,
      rewardSpeed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setSeizePaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _setTransferPaused(
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _supportMarket(
      bfToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accountAssets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bfAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowAllowed(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowCapGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowCaps(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowVerify(
      bfToken: string,
      borrower: string,
      borrowAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkMembership(
      account: string,
      bfToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimReward(uint8,address)"(
      rewardType: BigNumberish,
      holder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint8,address,address[])"(
      rewardType: BigNumberish,
      holder: string,
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint8,address[],address[],bool,bool)"(
      rewardType: BigNumberish,
      holders: string[],
      bfTokens: string[],
      borrowers: boolean,
      suppliers: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeFactorMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterMarkets(
      bfTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitMarket(
      bfTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetsIn(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHypotheticalAccountLiquidity(
      account: string,
      bfTokenModify: string,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialIndexConstant(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComptroller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateBorrowAllowed(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateBorrowVerify(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      liquidator: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidateCalculateSeizeTokens(
      bfTokenBorrowed: string,
      bfTokenCollateral: string,
      actualRepayAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationIncentiveMantissa(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAllowed(
      bfToken: string,
      minter: string,
      mintAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintGuardianPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintVerify(
      bfToken: string,
      minter: string,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingComptrollerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAllowed(
      bfToken: string,
      redeemer: string,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemVerify(
      bfToken: string,
      redeemer: string,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowAllowed(
      bfToken: string,
      payer: string,
      borrower: string,
      repayAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayBorrowVerify(
      bfToken: string,
      payer: string,
      borrower: string,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardAccrued(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBorrowState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardBorrowerIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEther(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSpeeds(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSupplierIndex(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSupplyState(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seizeAllowed(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seizeGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seizeVerify(
      bfTokenCollateral: string,
      bfTokenBorrowed: string,
      liquidator: string,
      borrower: string,
      seizeTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBfAddress(
      newBfAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAllowed(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGuardianPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferVerify(
      bfToken: string,
      src: string,
      dst: string,
      transferTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
